{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fail = exports.pass = exports.description = undefined;\n\nvar _util = require('../util');\n\nvar description = exports.description = '\\nKeyboard users move focus from one form control to the next by using the tab\\nkey. By default focus order is determined by source order.\\n\\nThe `tabIndex` prop allows the author to specify an alternative tab order.\\nElements with a `tabIndex` value greater than zero will receive focus in numerical\\norder, ahead of focusable elements with a `tabIndex` of zero.\\n\\nIt is recommended that authors avoid positive values for the `tabIndex` attribute\\nbecause it is brittle (any focusable elements added to the page without an\\nexplicit `tabIndex` value greater than zero will come last in the tab order) and\\ncan easily result in a page which is extremely difficult to navigate, causing\\naccessibility problems.\\n';\nexports.default = [{\n  msg: 'Avoid positive integer values for `tabIndex`.',\n  AX: 'AX_FOCUS_03',\n  test: function test(_, props) {\n    var tabIndex = (0, _util.hasProp)(props, 'tabIndex');\n    return !tabIndex || props.tabIndex <= 0;\n  }\n}];\nvar pass = exports.pass = [{\n  when: 'the element has no tabIndex',\n  render: function render(React) {\n    return React.createElement('div', null);\n  }\n}, {\n  when: 'the element has a negative tabIndex',\n  render: function render(React) {\n    return React.createElement('div', {\n      tabIndex: -1\n    });\n  }\n}, {\n  when: 'the element has a tabIndex of zero',\n  render: function render(React) {\n    return React.createElement('div', {\n      tabIndex: '0'\n    });\n  }\n}];\nvar fail = exports.fail = [{\n  when: 'the element has a positive tabIndex',\n  // eslint-disable-next-line jsx-a11y/tabindex-no-positive\n  render: function render(React) {\n    return React.createElement('div', {\n      tabIndex: 2\n    });\n  }\n}];","map":null,"metadata":{},"sourceType":"script"}