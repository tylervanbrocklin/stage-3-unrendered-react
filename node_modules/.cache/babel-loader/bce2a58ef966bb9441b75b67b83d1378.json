{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.description = exports.fail = exports.pass = undefined;\n\nvar _util = require('../util');\n\nexports.default = [{\n  msg: '`onBlur` should be preferred over `onChange`, unless absolutely necessary ' + 'and it has no negative consequences for keyboard only or screen-reader users.',\n  url: 'http://webaim.org/techniques/javascript/eventhandlers#onchange',\n  affects: [_util.devices.keyboardOnly, _util.devices.screenReaders],\n  test: function test(tagName, props) {\n    (0, _util.warnRuleDeprecated)('use-onblur-not-onchange', 'no-onchange');\n    var hidden = (0, _util.hiddenFromAT)(props);\n    var disabled = (0, _util.trueish)(props, 'aria-disabled');\n    var readOnly = (0, _util.trueish)(props, 'aria-readonly');\n    var onChange = (0, _util.listensTo)(props, 'onChange');\n    var onBlur = (0, _util.listensTo)(props, 'onBlur');\n    return hidden || disabled || readOnly || !onChange || onChange && onBlur;\n  }\n}];\nvar pass = exports.pass = [{\n  when: 'there is no `onChange` prop',\n  render: function render(React) {\n    return React.createElement('input', null);\n  }\n}, {\n  when: 'the element is aria-hidden',\n  render: function render(React) {\n    return React.createElement('input', {\n      onChange: _util.fn,\n      'aria-hidden': true\n    });\n  }\n}, {\n  when: 'the element is aria-disabled',\n  render: function render(React) {\n    return React.createElement('input', {\n      onChange: _util.fn,\n      'aria-disabled': true\n    });\n  }\n}, {\n  when: 'the element is aria-readonly',\n  render: function render(React) {\n    return React.createElement('input', {\n      onChange: _util.fn,\n      'aria-readonly': true\n    });\n  }\n}, {\n  when: 'the `onChange` prop is present along with an `onBlur` prop',\n  render: function render(React) {\n    return React.createElement('input', {\n      onChange: _util.fn,\n      onBlur: _util.fn\n    });\n  }\n}];\nvar fail = exports.fail = [{\n  when: 'the `onChange` prop is present without an `onBlur` prop',\n  render: function render(React) {\n    return React.createElement('input', {\n      onChange: _util.fn\n    });\n  }\n}];\nvar description = exports.description = '\\nEnforce usage of onBlur over onChange for accessibility. onBlur must be used\\ninstead of onChange, unless absolutely necessary and it causes no negative\\nconsequences for keyboard only or screen reader users.\\n';","map":null,"metadata":{},"sourceType":"script"}