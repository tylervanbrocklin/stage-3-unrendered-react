{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pass = exports.fail = exports.description = undefined;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _util = require('../util');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = [{\n  msg: 'This element does not support ARIA roles, states and properties.',\n  AX: 'AX_ARIA_12',\n  test: function test(tagName, props) {\n    (0, _util.warnRuleDeprecated)('no-unsupported-elements-use-aria', 'aria-unsupported-elements');\n    var reserved = Object.prototype.hasOwnProperty.call(_util.DOM, tagName) && _util.DOM[tagName].reserved || false;\n    var prop = (0, _util.hasProp)(props, (0, _keys2.default)(_util.aria).concat('role'));\n    return !reserved || !prop;\n  }\n}];\nvar description = exports.description = '\\nCertain reserved DOM elements do not support ARIA roles, states and properties.\\nThis is often because they are not visible, for example `meta`, `html`, `script`,\\n`style`. This rule enforces that these DOM elements do not contain the `role` and/or\\n`aria-*` props.\\n';\nvar fail = exports.fail = [{\n  when: 'the element should not be given any ARIA attributes',\n  // eslint-disable-next-line jsx-a11y/aria-unsupported-elements\n  render: function render(React) {\n    return React.createElement('meta', {\n      charSet: 'UTF-8',\n      'aria-hidden': 'false'\n    });\n  }\n}];\nvar pass = exports.pass = [{\n  when: 'the reserved element is not given an illegal prop',\n  render: function render(React) {\n    return React.createElement('meta', {\n      charSet: 'UTF-8'\n    });\n  }\n}, {\n  when: 'an illegal prop is given to a non-reserved element',\n  render: function render(React) {\n    return React.createElement('div', {\n      'aria-hidden': true\n    });\n  }\n}, {\n  when: 'an illegal prop is given to an unknown element',\n  render: function render(React) {\n    return React.createElement('g', {\n      'aria-hidden': true\n    });\n  }\n}];","map":null,"metadata":{},"sourceType":"script"}