{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.description = exports.fail = exports.pass = undefined;\n\nvar _util = require('../util');\n\nexports.default = [{\n  msg: 'You have a click handler on a non-interactive element but no `tabIndex` DOM property. ' + 'The element will not be navigable or interactive by keyboard users.',\n  url: 'http://www.w3.org/TR/wai-aria-practices/#focus_tabindex',\n  affects: [_util.devices.keyboardOnly],\n  test: function test(tagName, props) {\n    var hidden = (0, _util.hiddenFromAT)(props);\n    var interactive = (0, _util.isInteractive)(tagName, props);\n    var onClick = (0, _util.listensTo)(props, 'onClick');\n    var tabIndex = props.tabIndex !== undefined;\n    return hidden || interactive || !onClick || tabIndex;\n  }\n}];\nvar pass = exports.pass = [{\n  when: 'when there is an `onClick` with a `tabIndex`',\n  // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n  render: function render(React) {\n    return React.createElement('span', {\n      onClick: _util.fn,\n      tabIndex: 0\n    });\n  }\n}, {\n  when: 'the element is hidden from aria',\n  render: function render(React) {\n    return React.createElement('span', {\n      onClick: _util.fn,\n      'aria-hidden': true\n    });\n  }\n}, {\n  when: 'the element is interactive',\n  render: function render(React) {\n    return React.createElement('button', {\n      onClick: _util.fn\n    });\n  }\n}];\nvar fail = exports.fail = [{\n  when: 'there is an `onClick` with no `tabIndex`',\n  // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n  render: function render(React) {\n    return React.createElement('span', {\n      onClick: _util.fn\n    });\n  }\n}];\nvar description = exports.description = '\\nEnforce that elements that have an `onClick` handler also have\\na `tabIndex` property.  If not, they will not be navigable by\\nkeyboard users.\\n';","map":null,"metadata":{},"sourceType":"script"}